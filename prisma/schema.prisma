generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./lumora.db"
}

//
// ---------- Core Ads (simple) ----------
//
model Campaign {
  id                   String       @id @default(cuid())
  name                 String
  dailyBudgetCents     Int
  targetingRadiusMiles Int
  status               String       @default("active")
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  ads                  AdCreative[]
  cpvViews             CpvView[] // CPV events tied to this simple campaign

  @@index([status])
  @@index([createdAt])
}

model AdCreative {
  id          String   @id @default(cuid())
  campaignId  String
  imageUrl    String?
  headline    String
  description String
  ctaText     String   @default("Learn More")
  createdAt   DateTime @default(now())
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId, createdAt])
}

model Business {
  id          String   @id @default(cuid())
  name        String
  phone       String?
  whatsapp    String?
  addressText String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

//
// ---------- Simple Transaction (kept for legacy/aux use) ----------
//
enum TransactionType {
  TOPUP
  SPEND
  REFUND
}

model Transaction {
  id          String          @id @default(cuid())
  walletId    String
  wallet      Wallet          @relation(fields: [walletId], references: [id], onDelete: Cascade)
  type        TransactionType
  amountCents Int
  description String?
  createdAt   DateTime        @default(now())

  @@index([walletId, createdAt])
  @@index([type])
}

/// ---------- Lumora Ads: base campaign schema ----------
enum AdStatus {
  DRAFT
  ACTIVE
  PAUSED
  ARCHIVED
}

enum AdObjective {
  AWARENESS
  TRAFFIC
  CONVERSIONS
  VISITS
}

enum CreativeType {
  IMAGE
  VIDEO
}

model AdCampaign {
  id               String       @id @default(cuid())
  ownerId          String?
  title            String
  objective        AdObjective
  status           AdStatus     @default(DRAFT)
  creativeType     CreativeType
  creativeUrl      String
  landingUrl       String?
  dailyBudgetCents Int
  totalBudgetCents Int
  radiusKm         Int          @default(50)
  centerLat        Float?
  centerLon        Float?
  locationsJson    String?
  startAt          DateTime?
  endAt            DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@index([ownerId])
  @@index([status])
  @@index([objective])
  @@index([createdAt])
}

/// ---------- Lumora Wallet (ledger-first) ----------
enum LedgerType {
  CREDIT // top-up, refund, promo
  DEBIT // manual debit, fee
  AD_SPEND // delivery spend
  RESERVE // hold for upcoming spend
  RELEASE // unhold back to balance
  TRANSFER_IN // transfer from another wallet
  TRANSFER_OUT // transfer to another wallet
}

model Wallet {
  id           String   @id @default(cuid())
  ownerId      String // user id/email or account id (no FK for now)
  currency     String   @default("EUR")
  balanceCents Int      @default(0) // mirror of ledger sum; maintained in app tx
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  ledgers     WalletLedger[]
  outgoing    WalletTransfer[] @relation("fromWallet")
  incoming    WalletTransfer[] @relation("toWallet")
  Transaction Transaction[]

  @@unique([ownerId, currency]) // prevent dup wallets per currency
  @@index([ownerId, currency]) // fast ensures/lookups
}

model WalletLedger {
  id          String     @id @default(cuid())
  walletId    String
  wallet      Wallet     @relation(fields: [walletId], references: [id], onDelete: Cascade)
  type        LedgerType
  amountCents Int // positive numbers only; sign implied by type (app-enforced)
  refType     String? // e.g., "CPV", "STRIPE"
  refId       String? // e.g., idempotencyKey or Stripe session id
  note        String?
  createdAt   DateTime   @default(now())

  // One ledger per external reference -> hard idempotency
  @@unique([refType, refId])
  @@index([walletId, createdAt])
  @@index([type])
}

model WalletTransfer {
  id           String   @id @default(cuid())
  fromWalletId String
  toWalletId   String
  amountCents  Int
  note         String?
  createdAt    DateTime @default(now())

  fromWallet Wallet @relation("fromWallet", fields: [fromWalletId], references: [id], onDelete: Cascade)
  toWallet   Wallet @relation("toWallet", fields: [toWalletId], references: [id], onDelete: Cascade)

  @@index([fromWalletId, createdAt])
  @@index([toWalletId, createdAt])
  @@index([createdAt])
}

/// ---------- Stripe webhook idempotency ----------
model StripeEvent {
  id        String   @id // Stripe event id (e.g. evt_..., or use the Checkout session id if you prefer)
  type      String?
  createdAt DateTime @default(now())

  // You can expand later with account, payload hash, etc.
  @@index([createdAt])
}

/// ---------- CPV charge tracking (idempotent per view) ----------
model CpvView {
  id             String   @id @default(cuid())
  campaignId     String
  idempotencyKey String   @unique // e.g., "demo-view-<ts>" or any unique token per view
  costCents      Int
  ledgerId       String? // the WalletLedger.id that captured the charge
  createdAt      DateTime @default(now())

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId, createdAt])
}

model AdConversion {
  id           String   @id @default(cuid())
  campaignId   String
  creativeId   String?
  viewKey      String   @unique
  userId       String?
  eventType    String   // e.g. "CLICK", "INSTALL", "PURCHASE"
  rewardCents  Int      @default(0)
  createdAt    DateTime @default(now())

  @@index([campaignId, eventType])
}

/// Ad/UX interaction stream (lightweight analytics)
model AdEvent {
  id         String   @id @default(cuid())
  action     String   // "view" | "hover" | "click" | "complete" | etc.
  viewKey    String?  // ties to CpvView.idempotencyKey if available
  userId     String?
  campaignId String?  // derived from CpvView if viewKey present
  ms         Int?     // duration (ms) for hover/view segments
  mood       String?
  metaJson   String?  // stringified JSON for extra fields
  createdAt  DateTime @default(now())

  @@index([action, createdAt])
  @@index([viewKey, createdAt])
  @@index([campaignId, createdAt])
}

/// üîí Fraud signal log
model FraudEvent {
  id        String   @id @default(cuid())
  kind      String   // e.g. "RATE_LIMIT", "IP_BLOCK"
  reason    String?
  ip        String?
  userId    String?
  viewKey   String?
  score     Int      @default(1)
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([ip, createdAt])
}

/// üö´ Block a specific IP (optional expiry)
model IpBlock {
  ip        String   @id
  reason    String?
  expiresAt DateTime?
  createdAt DateTime @default(now())
}

/// ‚è±Ô∏è Sliding-window counters (for simple rate limiting)
model KeyCounter {
  key         String   @id
  count       Int      @default(0)
  windowStart DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([updatedAt])
}

/// Daily rollups per campaign (SQLite-friendly)
model AdMetricDaily {
  id            String   @id @default(cuid())
  day           DateTime // UTC midnight
  campaignId    String?
  views         Int      @default(0)
  hovers        Int      @default(0)
  clicks        Int      @default(0)
  conversions   Int      @default(0)
  spendCents    Int      @default(0)  // sum(CpvView.costCents)
  rewardsCents  Int      @default(0)  // sum(AdConversion.rewardCents)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([day])
  @@index([campaignId, day])
}

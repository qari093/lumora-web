import { NextRequest, NextResponse } from "next/server";
import Stripe from "stripe";

// Ensure Node runtime + dynamic to avoid edge body transforms
export const runtime = "nodejs";
export const dynamic = "force-dynamic";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY || "", {
  apiVersion: "2023-10-16",
});

/**
 * Stripe requires the EXACT raw request body for signature verification.
 * With App Router, use req.text() and DO NOT parse JSON before constructEvent.
 */
export async function POST(req: NextRequest) {
  const whsec = process.env.STRIPE_WEBHOOK_SECRET || "";
  const sig = req.headers.get("stripe-signature");
  const rawBody = await req.text();

  if (!whsec) {
    console.error("Missing STRIPE_WEBHOOK_SECRET in env");
    return new NextResponse("Server misconfigured", { status: 500 });
  }
  if (!sig) {
    return new NextResponse("Missing signature", { status: 400 });
  }

  let event: Stripe.Event;
  try {
    event = stripe.webhooks.constructEvent(rawBody, sig, whsec);
  } catch (err: any) {
    console.error("Webhook signature verification failed:", err?.message || err);
    return new NextResponse(
      "Webhook Error: " + (err?.message || "sig verify failed"),
      { status: 400 }
    );
  }

  try {
    switch (event.type) {
      case "checkout.session.completed": {
        const s = event.data.object as Stripe.Checkout.Session;
        // Example: map to your ledger/wallet system using metadata/client_reference_id
        const ownerId =
          (s.metadata && s.metadata.ownerId) ||
          s.client_reference_id ||
          "UNKNOWN";
        const amountCents =
          typeof s.amount_total === "number" ? s.amount_total : 0;

        console.log(
          "✅ checkout.session.completed",
          { ownerId, amountCents, session: s.id }
        );

        // TODO: Replace this with your actual credit function or internal API call.
        // await creditWallet(ownerId, amountCents, "Stripe checkout");
        break;
      }

      case "payment_intent.succeeded": {
        const pi = event.data.object as Stripe.PaymentIntent;
        console.log("✅ payment_intent.succeeded", { id: pi.id, amount: pi.amount });
        break;
      }

      case "payment_intent.payment_failed": {
        const pi = event.data.object as Stripe.PaymentIntent;
        console.warn("⚠️ payment_intent.payment_failed", pi.last_payment_error?.message);
        break;
      }

      default:
        console.log("ℹ️ Unhandled event type:", event.type);
    }

    return NextResponse.json({ received: true });
  } catch (err: any) {
    console.error("❌ Webhook handler error:", err?.message || err);
    return new NextResponse("Webhook handler error", { status: 500 });
  }
}

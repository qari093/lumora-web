import { NextResponse } from "next/server";
import type { LumaSearchResponse } from "../../../types/lumasearch";
const MOCK: Record<string, any[]> = {
  boxing: [
    { kind:"video", id:"v1", title:"Boxing footwork basics", by:"Coach A", t:37 },
    { kind:"creator", id:"c1", name:"FightLab", followers:128000 },
    { kind:"web", url:"https://www.expertboxing.com", title:"Footwork Guide", site:"expertboxing.com" }
  ],
  camera: [
    { kind:"video", id:"v2", title:"Beginner camera setup under $500", by:"LensPro", t:12 },
    { kind:"creator", id:"c2", name:"CineWave", followers:98000 },
    { kind:"web", url:"https://www.dpreview.com", title:"Best starter kits 2025", site:"dpreview.com" }
  ],
};
export async function GET(req: Request) {
  const { searchParams } = new URL(req.url);
  const q = (searchParams.get("q") || "").toLowerCase().trim();
  const pool = q ? (MOCK[q] || fallback(q)) : [];
  const res: LumaSearchResponse = { query:q, results:pool, tabs:["videos","creators","web"] };
  return NextResponse.json(res);
}
function fallback(q: string){
  return [
    { kind:"video", id:"v-demo", title:`Results for "${q}" (demo)`, by:"Lumora", t:5 },
    { kind:"creator", id:"c-demo", name:"Demo Creator", followers:12345 },
    { kind:"web", url:"https://en.wikipedia.org/wiki/Search_engine", title:"Search Engine (Wikipedia)", site:"wikipedia.org" }
  ];
}
